name: PROD Build-deploy

on:
  push:
    branches:
    - production

jobs:
  test:
    environment: testing
    name: Testing

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./web/requirements.txt

      - name: Test with pytest
        run: |
          pip install pytest
          pytest -vxs
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_URL: postgresql://postgres:postgres@localhost/postgres
          TESTS_DB_URL: postgresql://postgres:postgres@localhost/postgres
          HOSTNAME: http://localhost

  build-push:
    needs: [test]
    environment: deploy
    name: Push images to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fastapi_blog:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [test]
    environment: deploy
    name: Deploy to AWS EC2 instance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy
        env:
            PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
            HOSTNAME: ${{secrets.AWS_EC2_INSTANCE_HOSTNAME}}
            USER_NAME: ${{secrets.AWS_EC2_USER}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

              cd /home/ec2-user/fapi &&
              git checkout production &&
              git pull origin production &&
              docker-compose -f docker-compose.prod.yml pull &&
              docker-compose -f docker-compose.prod.yml up -d
              '
